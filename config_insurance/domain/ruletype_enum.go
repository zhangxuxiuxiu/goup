// Code generated by "go-enum -trimprefix=Rule -all=false -yaml -string -type=RuleType"; DO NOT EDIT.

// Install go-enum by `go get -u github.com/searKing/golang/tools/go-enum`
package domain

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RuleTier-1]
	_ = x[RuleFixedAmount-2]
	_ = x[RuleFixedRate-3]
	_ = x[RuleTenure-4]
	_ = x[RulePerson-5]
}

const _RuleType_name = "TierFixedAmountFixedRateTenurePerson"

var _RuleType_index = [...]uint8{0, 4, 15, 24, 30, 36}

func _() {
	var _nil_RuleType_value = func() (val RuleType) { return }()

	// An "cannot convert RuleType literal (type RuleType) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_RuleType_value
}

func (i RuleType) String() string {
	return strconv.Itoa(int(i))
}

var _RuleType_values = []RuleType{1, 2, 3, 4, 5}

var _RuleType_name_to_values = map[string]RuleType{
	_RuleType_name[0:4]:   1,
	_RuleType_name[4:15]:  2,
	_RuleType_name[15:24]: 3,
	_RuleType_name[24:30]: 4,
	_RuleType_name[30:36]: 5,
}

// ParseRuleTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseRuleTypeString(s string) (RuleType, error) {
	if val, ok := _RuleType_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RuleType values", s)
}

// RuleTypeValues returns all values of the enum
func RuleTypeValues() []RuleType {
	return _RuleType_values
}

// IsARuleType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RuleType) Registered() bool {
	for _, v := range _RuleType_values {
		if i == v {
			return true
		}
	}
	return false
}

//func _() {
//	var _nil_RuleType_value = func() (val RuleType) { return }()
//
//	// An "cannot convert RuleType literal (type RuleType) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_RuleType_value
//
//	// An "cannot convert RuleType literal (type RuleType) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_RuleType_value
//}

// MarshalYAML implements a YAML Marshaler for RuleType
func (i RuleType) MarshalYAML() (interface{}, error) {
	i -= 1
	if i >= RuleType(len(_RuleType_index)-1) {
		return "RuleType(" + strconv.FormatInt(int64(i+1), 10) + ")",nil
	}
	return _RuleType_name[_RuleType_index[i]:_RuleType_index[i+1]],nil
}

// UnmarshalYAML implements a YAML Unmarshaler for RuleType
func (i *RuleType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseRuleTypeString(s)
	return err
}
